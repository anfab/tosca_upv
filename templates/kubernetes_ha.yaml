tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca_ha/tosca/custom_types.yaml

description: Deploy a HA Kubernetes Virtual Cluster with 3 control plane nodes.

metadata:
  template_name: Kubernetes HA
  template_version: "0.1.0"
  display_name: Deploy a HA Kubernetes Virtual Cluster with
  icon: images/kubernetes.png
  tag: deprecated
  tag_color: grey
  tabs:
    HW Data:
      - wn_num
      - fe_cpus
      - fe_mem
      - fe_instance_type
      - wn_cpus
      - wn_mem
      - wn_instance_type
      - disk_size
      - volume_id
    Kubernetes Data: kube_.*

topology_template:
  inputs:
    wn_num:
      type: integer
      description: Number of WNs in the cluster
      default: 1
      required: yes
    fe_cpus:
      type: integer
      description: Number of CPUs for the control-plane nodes
      default: 2
      required: yes
      constraints:
        - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the control-plane nodes
      default: 8 GiB
      required: yes
      constraints:
        - valid_values: [ 8 GiB, 16 GiB, 32 GiB, 64 GiB, 128 GiB, 256 GiB, 512 GiB ]
    fe_instance_type:
      type: string
      description: Flavor name of the front-end node
      default: ""
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
        - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GiB
      required: yes
      constraints:
        - valid_values: [ 4 GiB, 8 GiB, 16 GiB, 32 GiB, 64 GiB, 128 GiB, 256 GiB, 512 GiB ]
    wn_instance_type:
      type: string
      description: Flavor name for the WNs
      default: ""
    disk_size:
      type: scalar-unit.size
      description: Size of the disk to be attached to the FE instance
      default: 10 GiB
      constraints:
        - valid_values: [ 10 GiB, 20 GiB, 50 GiB, 100 GiB, 200 GiB, 500 GiB, 1 TiB, 2 TiB ]
    volume_id:
      type: string
      description: "Or URL of the disk to be attached to the instance (format: ost://api.cloud.ifca.es/<vol_id>"
      default: ""

    kube_admin_token:
      type: string
      description: Access Token for the Kubernetes admin user
      default: not_very_secret_token
    kube_version:
      type: string
      description: Version of Kubernetes to install
      default: "1.23.6"
      constraints:
        - valid_values: [ "1.23.6", "1.22.9", "1.21.12" ]
    kube_cri_runtime:
      type: string
      description: CRI Runtime to use with Kubernetes
      default: "docker"
      constraints:
        - valid_values: [ docker, containerd ]
    kube_nvidia_support:
      type: boolean
      description: Flag to add NVIDIA support
      default: false
      constraints:
        - valid_values: [ false, true ]
    kube_cert_manager:
      type: boolean
      description: Flag to install Cert-Manager
      default: false
      constraints:
        - valid_values: [ false, true ]
    kube_cert_user_email:
      type: string
      description: Email to be used in the Let's Encrypt issuer
      default: "jhondoe@server.com"


    kube_ha_vip:
      type: string
      description: Virtual IP to use in the HA mode
      default: ""

  node_templates:

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            ports:
              https_port:
                protocol: tcp
                source: 443
              kube_port:
                protocol: tcp
                source: 6443
      properties:
        admin_username: kubeuser
        install_nfs_client: true
        admin_token: { get_input: kube_admin_token }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cert_manager: { get_input: kube_cert_manager }
        cert_user_email: { get_input: kube_cert_user_email }
        cri_runtime: { get_input: kube_cri_runtime }
        control_plane_ip: { get_input: kube_ha_vip }
        master_node_ip: { get_attribute: [ front, private_address, 0 ] }
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            additional_ip: { get_input: kube_ha_vip }
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
            instance_type: { get_input: fe_instance_type }
        os:
          properties:
            type: linux
      requirements:
        - local_storage:
            node: fe_block_storage
            relationship:
              type: AttachesTo
              properties:
                location: /pv

    fe_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: disk_size }
        volume_id: { get_input: volume_id }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cri_runtime: { get_input: kube_cri_runtime }
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: wn_num }
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            instance_type: { get_input: wn_instance_type }
        os:
          properties:
            type: linux

    kube_cp:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            ports:
              https_port:
                protocol: tcp
                source: 443
              kube_port:
                protocol: tcp
                source: 6443
      properties:
        admin_username: kubeuser
        install_nfs_client: true
        admin_token: { get_input: kube_admin_token }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cert_manager: { get_input: kube_cert_manager }
        cert_user_email: { get_input: kube_cert_user_email }
        cri_runtime: { get_input: kube_cri_runtime }
        control_plane_ip: { get_input: kube_ha_vip }
        master_node_ip: { get_attribute: [ front, private_address, 0 ] }
      requirements:
        - host: cp

    cp:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: 2
        endpoint:
          properties:
            additional_ip: { get_input: kube_ha_vip }
            dns_name: "cp-#N#"
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
            instance_type: { get_input: fe_instance_type }
        os:
          properties:
            type: linux

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/dashboard/' ] }
    kubeapps_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/kubeapps/' ] }
    api_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], ':6443' ] }
    api_endpoint_1:
      value: { concat: [ 'https://', get_attribute: [ cp, public_address, 0 ], ':6443' ] }
    api_endpoint_2:
      value: { concat: [ 'https://', get_attribute: [ cp, public_address, 1 ], ':6443' ] }
    virtual_api_endpoint:
      value: { concat: [ 'https://', get_input: kube_ha_vip, ':8443' ] }
